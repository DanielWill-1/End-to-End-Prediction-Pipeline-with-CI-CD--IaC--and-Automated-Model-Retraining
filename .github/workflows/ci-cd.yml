# .github/workflows/main.yml (or any name you prefer)

name: CI/CD - Retrain, Rebuild, and Redeploy

# -------------------------------------------------------------------------
# IMPORTANT: This triggers the workflow ONLY when files inside the 'data/'
# directory are pushed to the main branch.
# --- CHANGE 'data/**' to match your project's data folder ---
# -------------------------------------------------------------------------
on:
  push:
    branches:
      - main
    paths:
      - 'data/diabetes.csv' # Example: 'data/training_data.csv'

# Environment variables for your GCP project
env:
  PROJECT_ID: "aiops-mini-project"
  GCP_REGION: "us-central1"
  REGISTRY_NAME: "my-app-registry"       # From your variables.tf
  SERVICE_NAME: "diabetes-api-service"   # From your variables.tf
  IMAGE_NAME: "my-api"                   # From your variables.tf

jobs:
  # -----------------------------------------------------------
  # JOB 1: Train the model, build the image, push to GCP
  # -----------------------------------------------------------
  retrain_and_build:
    name: Retrain and Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' # Change to your Python version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt # Assumes you have a requirements.txt

      # -------------------------------------------------------------------
      # --- IMPORTANT: Add your model training step here ---
      # This MUST save your model file (e.g., model.pkl) where your
      # Dockerfile expects to copy it from.
      # -------------------------------------------------------------------
      - name: Train the model
        run: |
          echo "Training model..."
          python scripts/train.py # <-- CHANGE THIS to your training script
          echo "Model training complete."

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # This step builds the image and pushes it to Google Artifact Registry
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          # We tag with 'latest' and the unique commit SHA for versioning
          tags: |
            ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=inline
          cache-to: type=inline

  # -----------------------------------------------------------
  # JOB 2: Deploy the new image using Terraform
  # -----------------------------------------------------------
  deploy_to_cloud_run:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: retrain_and_build # This job only runs if the build job succeeds

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: terraform # Runs in your 'terraform' subfolder

      # This step tells Terraform to apply changes, passing the NEW
      # unique image tag (github.sha) to your 'docker_image_name' variable.
      - name: Terraform Apply
        run: terraform apply -auto-approve -var="docker_image_name=${{ env.IMAGE_NAME }}:${{ github.sha }}"
        working-directory: terraform # Runs in your 'terraform' subfolder