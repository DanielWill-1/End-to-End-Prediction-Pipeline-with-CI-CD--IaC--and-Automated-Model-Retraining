# .github/workflows/main.yml

name: CI/CD - Retrain, Rebuild, and Redeploy

on:
  push:
    branches:
      - main
    paths:
      - 'data/diabetes.csv' 

env:
  PROJECT_ID: "aiops-mini-project"
  GCP_REGION: "us-central1"
  REGISTRY_NAME: "my-app-registry" 
  SERVICE_NAME: "diabetes-api-service" 
  IMAGE_NAME: "my-api" 

jobs:
  # -----------------------------------------------------------
  # JOB 1: (No changes to this job)
  # -----------------------------------------------------------
  retrain_and_build:
    name: Retrain and Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt 

      - name: Train the model
        run: |
          echo "Training model..."
          python scripts/train.py 
          echo "Model training complete."

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=inline
          cache-to: type=inline

  # -----------------------------------------------------------
  # JOB 2: Deploy the new image using Terraform
  # -----------------------------------------------------------
  deploy_to_cloud_run:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: retrain_and_build 

    # --- ADDED: This makes the service URL available to other jobs ---
    outputs:
      service_url: ${{ steps.get_outputs.outputs.service_url }}
    # ----------------------------------------------------------------

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: terraform 

      - name: Terraform Apply
        # --- ADDED: An 'id' so we can reference this step ---
        id: apply
        # --------------------------------------------------
        run: terraform apply -auto-approve -var="docker_image_name=${{ env.IMAGE_NAME }}:${{ github.sha }}"
        working-directory: terraform

      # --- ADDED: This new step reads the output from Terraform ---
      - name: Get Terraform Outputs
        id: get_outputs
        working-directory: terraform
        run: |
          echo "service_url=$(terraform output -raw cloud_run_url)" >> $GITHUB_OUTPUT
      # ----------------------------------------------------------

  # -----------------------------------------------------------
  # --- ADDED: ENTIRE NEW JOB FOR AUTOMATED TESTING ---
  # -----------------------------------------------------------
  smoke_test_endpoint:
    name: Smoke Test Live Endpoint
    runs-on: ubuntu-latest
    needs: deploy_to_cloud_run # This job runs ONLY AFTER deployment succeeds

    steps:
      - name: Test root (GET) endpoint
        run: |
          echo "Testing URL: ${{ needs.deploy_to_cloud_run.outputs.service_url }}"
          # -f = fail fast (exit with error) if server returns 4xx or 5xx
          # -L = follow redirects
          curl -f -L "${{ needs.deploy_to_cloud_run.outputs.service_url }}"

      - name: Test predict (POST) endpoint
        run: |
          echo "Testing POST to: ${{ needs.deploy_to_cloud_run.outputs.service_url }}/predict"
          
          # This command does 4 things:
          # 1. Sends a POST request with sample JSON data
          # 2. -s = silent mode (no progress bar)
          # 3. -o /dev/null = throw away the response body (we don't need it)
          # 4. -w "%{http_code}" = only print the HTTP status code
          response_code=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -d '{"pregnancies": 6, "glucose": 148, "blood_pressure": 72, "skin_thickness": 35, "insulin": 0, "bmi": 33.6, "diabetes_pedigree": 0.627, "age": 50}' \
            "${{ needs.deploy_to_cloud_run.outputs.service_url }}/predict")
          
          echo "API returned status code: $response_code"
          
          # Check if the status code is 200 (OK)
          if [ $response_code -ne 200 ]; then
            echo "Test failed: API did not return a 200 OK."
            exit 1
          fi
          
          echo "Test passed: API returned 200 OK."